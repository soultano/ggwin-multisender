import { TonConnectUI } from "@tonconnect/ui";

const tonConnect = new TonConnectUI({
  manifestUrl: "https://soultano.github.io/ggwin-multisender/tonconnect-manifest.json",
  buttonRootId: "connectWalletBtn"
});

const sendBtn = document.getElementById("sendBtn");
const walletField = document.getElementById("wallets");
const walletAddressDisplay = document.getElementById("walletAddress");

sendBtn.addEventListener("click", async () => {
  const connectedWallet = await tonConnect.wallet;
  if (!connectedWallet) {
    alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏ –∫–æ—à–µ–ª—ë–∫");
    return;
  }

  const addresses = walletField.value.split("\n").map(a => a.trim()).filter(Boolean);
  if (addresses.length === 0) {
    alert("–í—Å—Ç–∞–≤—å –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π");
    return;
  }

  // ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî —Å–µ–π—á–∞—Å —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å–∞
  import { beginCell, toNano, Address } from '@ton/core';

async function sendJetton(toAddress) {
  const wallet = await tonConnect.wallet;
  if (!wallet) return;

  const transfer = beginCell()
    .storeUint(0xf8a7ea5, 32) // opcode Jetton transfer
    .storeUint(0, 64)         // query_id
    .storeAddress(Address.parse(toAddress))
    .storeAddress(Address.parse(wallet.account.address))
    .storeCoins(toNano('15000'))
    .storeAddress(null)
    .storeUint(0, 1) // no custom_payload
    .storeCoins(0)   // forward_amount
    .storeAddress(null) // forward_payload
    .endCell();

  await tonConnect.sendTransaction({
    validUntil: Math.floor(Date.now() / 1000) + 360,
    messages: [
      {
        address: "<UQAT4kuGQHPhVBw0htnonfELVeeB7t0ov08fJ8fwx8FZ9arZ>", // üîÅ –ó–ê–ú–ï–ù–ò –Ω–∞ —Ç–≤–æ–π GGWIN jetton wallet
        amount: toNano("0.05").toString(), // –æ–ø–ª–∞—Ç–∞ –∑–∞ gas
        payload: transfer.toBoc().toString("base64")
      }
    ]
  });
}

  console.log("–û—Ç–ø—Ä–∞–≤–∏–º 15000 GGWIN –Ω–∞:");
  addresses.forEach(addr => console.log(addr));
});
for (const addr of addresses) {
  try {
    await sendJetton(addr);
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${addr}`);
  } catch (e) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ ${addr}:`, e);
  }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
tonConnect.onStatusChange(wallet => {
  if (wallet?.account?.address) {
    walletAddressDisplay.textContent = `–ö–æ—à–µ–ª—ë–∫: ${wallet.account.address}`;
  }
});
